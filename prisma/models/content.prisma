model Website {
    id Int @id @default(autoincrement())
    name String @unique
    slug String @unique
    meta Json 
    pages Page[]
    news  News[]
    type WebsiteType @default(Other)
    status WebsiteStatus @default(INACTIVE)
    numberOfVisitors Int @default(0)
    numberOfVisitorsPerMonth Int @default(0)
    layoutItem Layout[]
    userId Int?
    user User? @relation(fields: [userId], references: [id])
}
model Page {
    id Int @id @default(autoincrement())
    name String 
    slug String
    websiteId Int 
    sections PageSections[] 
    website Website @relation(fields: [websiteId], references: [id])
    @@unique([websiteId, slug])
}
model Section{
    id Int @id @default(autoincrement())
    name String @unique
    type  SectionType @default(section)
    componentId String @unique
    imgUrl String @default("") 
    pages PageSections[] 
    layouts Layout[]
}
model Layout {
    id Int @id @default(autoincrement())
    data Json 
    type SectionType @default(nav)
    sectionId Int?
    order Int?
    websiteId Int
    @@unique([sectionId, websiteId])
    website Website @relation(fields: [websiteId], references: [id])
    section Section? @relation(fields: [sectionId], references: [id])
}


model PageSections{
    id Int @id @default(autoincrement()) 
    pageId Int
    sectionId Int
    page Page @relation(fields: [pageId], references: [id], onDelete: Cascade)
    section Section @relation(fields: [sectionId], references: [id])
    data Json 
    order Int ?
   
}

enum SectionType{
    nav
    footer 
    news
    section
    persons
}

enum WebsiteStatus{
    ACTIVE
    INACTIVE
}

enum WebsiteType{
    Website
    Ecommerce
    Blog
    Portfolio
    News
    Travel
    Education
    Community
    Application
    Other
}
